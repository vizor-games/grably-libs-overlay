diff -r edf7a3b620e7 src/main/java/org/jboss/logging/LoggerProviders.java
--- a/src/main/java/org/jboss/logging/LoggerProviders.java	Sat Jun 16 14:25:56 2018 +0300
+++ b/src/main/java/org/jboss/logging/LoggerProviders.java	Sat Jun 16 14:36:51 2018 +0300
@@ -47,12 +47,8 @@
                 }
             });
             if (loggerProvider != null) {
-                if ("jboss".equalsIgnoreCase(loggerProvider)) {
-                    return tryJBossLogManager(cl, "system property");
-                } else if ("jdk".equalsIgnoreCase(loggerProvider)) {
+                if ("jdk".equalsIgnoreCase(loggerProvider)) {
                     return tryJDK("system property");
-                } else if ("log4j2".equalsIgnoreCase(loggerProvider)) {
-                    return tryLog4j2(cl, "system property");
                 } else if ("log4j".equalsIgnoreCase(loggerProvider)) {
                     return tryLog4j(cl, "system property");
                 } else if ("slf4j".equalsIgnoreCase(loggerProvider)) {
@@ -82,17 +78,6 @@
 
         // Finally search the class path
         try {
-            return tryJBossLogManager(cl, null);
-        } catch (Throwable t) {
-            // nope...
-        }
-        try {
-            // MUST try Log4j 2.x BEFORE Log4j 1.x because Log4j 2.x also passes Log4j 1.x test in some circumstances
-            return tryLog4j2(cl, null);
-        } catch (Throwable t) {
-            // nope...
-        }
-        try {
             return tryLog4j(cl, null);
         } catch (Throwable t) {
             // nope...
@@ -119,17 +104,6 @@
         return provider;
     }
 
-    // JBLOGGING-95 - Add support for Log4j 2.x
-    private static LoggerProvider tryLog4j2(final ClassLoader cl, final String via) throws ClassNotFoundException {
-        Class.forName("org.apache.logging.log4j.Logger", true, cl);
-        Class.forName("org.apache.logging.log4j.LogManager", true, cl);
-        Class.forName("org.apache.logging.log4j.spi.AbstractLogger", true, cl);
-        LoggerProvider provider = new Log4j2LoggerProvider();
-        // if Log4j 2 has a bad implementation that doesn't extend AbstractLogger, we won't know until getting the first logger throws an exception
-        logProvider(provider, via);
-        return provider;
-    }
-
     private static LoggerProvider tryLog4j(final ClassLoader cl, final String via) throws ClassNotFoundException {
         Class.forName("org.apache.log4j.LogManager", true, cl);
         // JBLOGGING-65 - slf4j can disguise itself as log4j.  Test for a class that slf4j doesn't provide.
@@ -140,17 +114,6 @@
         return provider;
     }
 
-    private static LoggerProvider tryJBossLogManager(final ClassLoader cl, final String via) throws ClassNotFoundException {
-        final Class<? extends LogManager> logManagerClass = LogManager.getLogManager().getClass();
-        if (logManagerClass == Class.forName("org.jboss.logmanager.LogManager", false, cl)
-                && Class.forName("org.jboss.logmanager.Logger$AttachmentKey", true, cl).getClassLoader() == logManagerClass.getClassLoader()) {
-            final LoggerProvider provider = new JBossLogManagerProvider();
-            logProvider(provider, via);
-            return provider;
-        }
-        throw new IllegalStateException();
-    }
-
     private static void logProvider(final LoggerProvider provider, final String via) {
         // Log a debug message indicating which logger we are using
         final Logger logger = provider.getLogger(LoggerProviders.class.getPackage().getName());
